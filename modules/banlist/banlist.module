<?php

/**
 * Implementation of hook_menu().
 */
function banlist_menu() 
{
  $items['admin/config/people/user-restrictions/banlist'] = array(
    'title' => 'Ban list',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('banlist_form'),
    'access callback' => 'banlist_access_callback',
    'access arguments' => array('administer ban list'),
    'type' => MENU_LOCAL_TASK,
	'weight' => 10,
    );

  return $items;
}

/**
 * Implementation of hook_permission().
 */
function banlist_permission() {
  return array(
    'administer ban list' => array(
      'description' => t('Administer the list of banned usernames.'),
      'title' => t('Administer ban list'),
      'restrict access' => TRUE,
    ));
}

/**
 * Access callback for banlist_menu().
 *
 * @param string $permission
 * The permission that is required.
 *
 * @param array $account
 * Optional. The account that the current user must have. 
 *
 * @return boolean
 * TRUE if access is granted. FALSE if access is denied.
 *
 */
function banlist_access_callback($permission, $account = NULL) 
{
  if (!isset($account)) {
      return user_access($permission);
  }

  global $user;

  return ($account->uid == $user->uid && user_access($permission));
}

/**
 * Administration form to control which usernames to ban.
 */
function banlist_form()
{
  static $ban_list = array('name' => array('admin', 'administrator', 'help', 'helpdesk', 'op', 'oper', 'operator', 'root', 'superadmin', 'superuser', 'toor'));


  $disabled = array_merge_recursive(banlist_get_missing_masks($ban_list), banlist_get_disabled_masks($ban_list));
  foreach ($ban_list as $type => $masks) {
	 if (is_array($disabled[$type]))
		 $enabled[$type] = array_diff($ban_list[$type], $disabled[$type]);
	 else
		 $enabled[$type] = array();
  }

  // Username ban list
  $form['banlist_usernames'] = array(
      '#type' => 'checkboxes',
      '#title' => t('Usernames'),
      '#description' => t('Users will not be able to use or create an account with a username in this list.'),
      '#options' => drupal_map_assoc(array_merge($enabled['name'], $disabled['name'])),
      '#default_value' => $enabled['name'],
	  '#attached' => array(
		  'js' => array(drupal_get_path('module', 'banlist') . '/banlist.js'),
		  ),
      );
  $form['banlist_submit'] = array(
      '#type' => 'submit',
      '#value' => t('Save'),
      );
  return $form;
}

/**
 * Implementation of banlist_form submit handler.
 */
function banlist_form_submit(&$form, &$form_state)
{
  $status = banlist_get_checkbox_status($form_state['values']['banlist_usernames']);

  banlist_enable_masks(array('name' => $status['enabled']));
  banlist_disable_masks(array('name' => $status['disabled']));
}

/**
 * Determine which checkboxes where enabled/disabled.
 */
function banlist_get_checkbox_status(&$choices)
{
  $enabled = array();
  $disabled = array();

  foreach ($choices as $name => $value)
  {
    if ($value !== 0)  
      $enabled[] = $name; 
    else
      $disabled[] = $name; 
  }
  return array('enabled' => $enabled, 'disabled' => $disabled);
}

/**
 * Enable/create an array of masks.
 *
 * @param array $masks
 * The array of arrays, where each subarray is name of the mask type.
 *
 */
function banlist_enable_masks($mask_list)
{
  if (!is_array($mask_list))
	return;

  foreach ($mask_list as $type => $masks) {
    if (count($masks) == 0)
		continue;

	$missing_masks = banlist_get_missing_masks(array($type => $masks));
    banlist_create_masks( $missing_masks );

    db_update("user_restrictions")
	 ->fields(array(
		'status' => 0
		))
	 ->condition('mask', $masks, 'IN')
     ->condition('type', $type)
     ->condition('status', 1)
	 ->execute();
  }
}

/**
 * Disable an array of masks.
 *
 * @param array $masks
 * The array of arrays, where each subarray is name of the mask type.
 *
 */
function banlist_disable_masks($mask_list)
{
  if (is_array($mask_list))
    banlist_remove_masks($mask_list);
}

/**
 * Create an array of masks.
 *
 * @param array $masks
 * The array of masks to create.
 *
 * @param string $type
 * The type of mask to create for each value of $masks.
 *
 */
function banlist_create_masks($mask_list)
{
  foreach ($mask_list as $type => $masks) {
    foreach ($masks as $mask) {
       db_query("INSERT INTO {user_restrictions} (mask, type, status) VALUES (:mask, :type, :status)", array(':mask' => $mask, ':type' => $type, 'status' => 0));
    }
  }
}

/**
 * Delete an array of masks.
 *
 * @param array $masks
 * The array of masks to delete.
 *
 * @param string $type
 * The type of mask to delete for each value of $masks.
 *
 */
function banlist_remove_masks($mask_list)
{
  foreach ($mask_list as $type => $masks) {
    foreach ($masks as $mask) {
      db_query("DELETE FROM {user_restrictions} WHERE mask = :mask AND type = :type AND status = :status", array(':mask' => $mask, ':type' => $type, ':status' => 0));
    }
  }
}

/**
 * Determine which masks are missing from the database for a given array of masks.
 *
 * @param array $masks
 * The array of masks to search for.
 *
 * @param string $type
 * The type of mask for each value of $masks.
 *
 * @return array
 * An array of masks that are in $masks and have been disabled.
 *
 */
function banlist_get_disabled_masks($mask_list)
{
	if (!is_array($mask_list))
		return array();

	foreach($mask_list as $type => $masks) {
		$result = db_query("SELECT mask FROM {user_restrictions} WHERE mask IN (:masks) AND type = :type AND status = :status", array(':masks' => $masks, ':type' => $type, 'status' => 1));
		$mask_list[$type] = $result->fetchCol();
	}

	return $mask_list;
}

/**
 * Determine which masks are missing from the database for a given array of masks.
 *
 * @param array $masks
 * The array of masks to search for.
 *
 * @param string $type
 * The type of mask for each value of $masks.
 *
 * @return array
 * An array of masks that are in $masks, but not in the database.
 *
 */
function banlist_get_missing_masks($mask_list)
{
	if (!is_array($mask_list))
		return array();

	foreach($mask_list as $type => $masks) {
        if (count($masks) == 0)
			continue;

		$result = db_query("SELECT mask FROM {user_restrictions} WHERE mask IN (:masks) AND type = :type", array(':masks' => $masks, ':type' => $type));

		if ($result->rowCount() > 0)
			$mask_list[$type] = array_diff($masks, $result->fetchCol());
	}

	return $mask_list;
}
